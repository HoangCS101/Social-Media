<?php

namespace humhub\modules\mail\models;

use Yii;
use DateTime;
use yii\base\Security;
use humhub\components\ActiveRecord;
use yii\behaviors\TimestampBehavior;
use yii\behaviors\BlameableBehavior;
use humhub\modules\mail\models\Message;
use humhub\modules\user\models\User;
use humhub\modules\content\widgets\richtext\RichText;
use humhub\modules\mail\live\UserMessageDeleted;
use yii\db\ActiveQuery;

/**
 * This is the model class for table "temporary_message_entry".
 *
 * @property int $id
 * @property int $message_id
 * @property int $user_id
 * @property string $content
 * @property string $type
 * @property string $created_at
 * @property int|null $created_by
 * @property int|null $updated_by
 * @property string|null $updated_at
 *
 * @property Message $message
 * @property User $user
 */
abstract class AbstractSecureMessageEntry extends ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public const TYPE_MESSAGE = 0;
    public const TYPE_USER_JOINED = 1;
    public const TYPE_USER_LEFT = 2;

    protected bool $requiredContent = false;
    private ?string $decrypted_content = null;

    /**
     * Get type of the message entry
     *
     * @return int
     */
    abstract public static function type(): int;

    /**
     * Check if the given or current User can edit the message entry
     *
     * @param User|null $user
     * @return bool
     */
    abstract public function canEdit(?User $user = null): bool;

    /**
     * Notify Users about this message entry
     *
     * @var bool $isNewConversation
     */
    abstract public function notify(bool $isNewConversation = false);

    public static function tableName()
    {
        return '{{%secure_message_entry}}';
    }

    public function rules()
    {
        return [
            [['message_id', 'user_id'], 'required'],
            [['message_id', 'user_id', 'created_by', 'updated_by'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
        //     [['message_id'], 'exist', 'skipOnError' => true, 'targetClass' => Message::class, 'targetAttribute' => ['message_id' => 'id']],
        //     [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /*
    * @inheritdoc
    */
    public static function createForMessage(Message $message, User $user, ?string $content = null): self
    {
        // Attach Message Entry
        return new static([
            'message_id' => $message->id,
            'user_id' => $user->id,
            'type' => static::type(),
            'content' => $content
        ]);
    }

    /**
     * @inheritdoc
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            // Updates the updated_at attribute
            $this->message->save();
        }
        if ($insert && !empty($this->content)) {
            $security = new Security();
            $key = $security->generateRandomString(32);
            $this->key = $key;
            $encrypted = $security->encryptByPassword($this->content, $key);
            $this->content = base64_encode($encrypted);
        }


        return parent::beforeSave($insert);
    }

    /**
     * @inheritdoc
     */
    public function afterSave($insert, $changedAttributes)
    {
        // RichText::postProcess('', $this);
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * 
     * @inheritdoc
     */
    public function afterDelete()
    {
        if ($this->message instanceof Message) {
            foreach ($this->message->users as $user) {
                Yii::$app->live->send(new UserMessageDeleted([
                    'contentContainerId' => $user->contentcontainer_id,
                    'message_id' => $this->message_id,
                    'entry_id' => $this->id,
                    'user_id' => $user->id,
                ]));
            }
        }

        parent::afterDelete();
    }

    public function afterFind()
    {
        parent::afterFind();

        if (!empty($this->content) && !empty($this->key)) {
            try {
                $security = new Security();
                $this->decrypted_content = $security->decryptByPassword(base64_decode($this->content), $this->key);
            } catch (\Throwable $e) {
                $this->decrypted_content = null;
            }
        }
    }

    public function getDecryptedContent() {
        return $this->decrypted_content;
    }
    public function setDecryptedContent($value) {
        $this->decrypted_content = $value;
    }

    public function getUser(): ActiveQuery
    {
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    public function getMessage(): ActiveQuery
    {
        return $this->hasOne(Message::class, ['id' => 'message_id']);
    }
}

